/* !don't remove! -*- C++ -*-
 *
 * Teng -- a general purpose templating engine.
 * Copyright (C) 2004  Seznam.cz, a.s.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Seznam.cz, a.s.
 * Naskove 1, Praha 5, 15000, Czech Republic
 * http://www.seznam.cz, mailto:teng@firma.seznam.cz
 *
 *
 * $Id: tengsyntax.yy,v 1.14 2010-06-11 08:25:35 burlog Exp $
 *
 * DESCRIPTION
 * Teng grammar semantic actions.
 *
 * AUTHORS
 * Stepan Skrob <stepan@firma.seznam.cz>
 * Michal Bukovsky <michal.bukovsky@firma.seznam.cz>
 *
 * HISTORY
 * 2018-06-07  (burlog)
 *             Moved from syntax.yy.
 */

#ifndef TENGSEMANTICEXPR_H
#define TENGSEMANTICEXPR_H

#include <string>

#include "semantic.h"

namespace Teng {
namespace Parser {

/** Saves the point where expression begins.
 */
void note_expr_start_point(Context_t *ctx, const Pos_t &pos);

/** Saves the highest valid address (program->size() - 1) as possible
 * optimization point.
 */
void note_optimization_point(Context_t *ctx, bool optimizable);

/** Attempts to optimize expression during compile time. (NOT TRUE -> FALSE)
 */
void optimize_expr(Context_t *ctx, uint32_t arity, bool lazy_evaluated = false);

/** Discards all instructions generated by valid part of invalid expression and
 * restore context to valid state.
 */
void discard_expr(Context_t *ctx);

/** Cleanes used resources for building exprs.
 */
void finish_expr(Context_t *ctx);

/** Prepares new expression.
 */
void prepare_expr(Context_t *ctx, const Pos_t &pos);

/** Generates expression from given symbol.
 */
uint32_t
generate_str_expr(Context_t *ctx, const Token_t &token, bool negate = false);

/** Generates binary operator AND.
 */
void generate_bin_and(Context_t *ctx, const Token_t &token);

/** Finalizes binary operator AND.
 */
void finalize_bin_and(Context_t *ctx);

/** Generates binary operator OR.
 */
void generate_bin_or(Context_t *ctx, const Token_t &token);

/** Finalizes binary operator OR.
 */
void finalize_bin_or(Context_t *ctx);

/** Generates expression from given symbol.
 */
template <typename Instr_t, typename Token_t>
void generate_expr(Context_t *ctx, const Token_t &token) {
    generate<Instr_t>(ctx, token.pos);
}

} // namespace Parser
} // namespace Teng

#endif /* TENGSEMANTICEXPR_H */

